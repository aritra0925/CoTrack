apply plugin: 'com.android.application'

android.lintOptions {
    disable 'MissingTranslation'
    disable 'ExtraTranslation'
    disable 'BlockedPrivateApi'
}

def getCloudantApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("CLOUDANT_API_KEY");
}

def getCloudantUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("CLOUDANT_URL");
}

def getCloudantDBList() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("CLOUDANT_DB_LIST");
}

def getWatsonApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("WATSON_API_KEY");
}

def getWatsonAssistantUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("WATSON_ASSISTANT_URL");
}

def getWatsonWorkspace() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("WATSON_WORKSPACE");
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.0"
    ndkVersion "21.1.6352462"

    defaultConfig {
        applicationId "com.cotrack"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "CLOUDANT_API_KEY", "\""+getCloudantApiKey()+"\""
        buildConfigField "String", "CLOUDANT_URL", "\""+getCloudantUrl()+"\""
        buildConfigField "String", "CLOUDANT_DB_LIST", "\""+getCloudantDBList()+"\""
        buildConfigField "String", "WATSON_API_KEY", "\""+getWatsonApiKey()+"\""
        buildConfigField "String", "WATSON_ASSISTANT_URL", "\""+getWatsonAssistantUrl()+"\""
        buildConfigField "String", "WATSON_WORKSPACE", "\""+getWatsonWorkspace()+"\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Java language implementation
    implementation "androidx.ui:ui-tooling:0.1.0-dev15"
    implementation "androidx.ui:ui-test:0.1.0-dev15"
    implementation 'androidx.core:core-ktx:1.1.0-alpha04'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.jakewharton:butterknife:10.2.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'com.ibm.watson:ibm-watson:8.5.0'
    implementation group: 'com.cloudant', name: 'cloudant-client', version: '2.19.1'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp-urlconnection', version: '3.12.12'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.hibernate:hibernate-core:5.4.18.Final'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.core:core:1.1.0-beta01'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'com.android.support:multidex:1.0.3'

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation "com.microsoft.appcenter:appcenter-distribute:3.2.1"
    implementation "com.microsoft.appcenter:appcenter-crashes:3.2.1"
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    annotationProcessor "androidx.annotation:annotation:$annotationVersion"
}

private static File findJavaHome() {
    String javaPath = System.getProperty("java.home")
    if (javaPath != null) {
        File javaBase = new File(javaPath)
        if (javaBase.exists()) {
            if (javaBase.getName().equalsIgnoreCase("jre") && new File(javaBase.getParentFile(), "bin/java").exists()) {
                return javaBase.getParentFile()
            } else {
                return javaBase
            }
        } else {
            return null
        }
    } else {
        return null
    }
}

private static File findJavac() {
    File javaHome = findJavaHome()
    if (javaHome != null) {
        return new File(javaHome, "bin/javac")
    } else {
        return null
    }
}

apply plugin: 'com.google.gms.google-services'